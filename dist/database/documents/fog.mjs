import BaseFogExploration from"../../../common/documents/fog-exploration.mjs";import ServerDocumentMixin from"../backend/server-document.mjs";import DocumentSocketResponse from"../../../common/abstract/socket.mjs";import{randomID}from"../../../common/utils/helpers.mjs";export default class FogExploration extends(ServerDocumentMixin(BaseFogExploration)){static#e=[];static async find(e={},o={}){const t=await super.find(e,o);if(!0===o.expireOthers){const e=t.length?t.pop():null;return t.length&&await this.sublevel.delMany(t.map((e=>e._id))),e}return t}static async _onCreateOperation(e,o,t){await super._onCreateOperation(e,o,t),o.broadcast=!1}static async _onUpdateOperation(e,o,t){await super._onUpdateOperation(e,o,t),o.broadcast=!1}static async _onDeleteOperation(e,o,t){await super._onDeleteOperation(e,o,t),o.broadcast=!1}async _preCreate(e,o,t){const n=FogExploration.#e.find((o=>o.sceneId===e.scene));return!n?.to.has(e.user)&&super._preCreate(e,o,t)}async _preUpdate(e,o,t){const n=e.scene??this.scene,s=e.user??this.user,i=FogExploration.#e.find((e=>e.sceneId===n));return!i?.to.has(s)&&super._preUpdate(e,o,t)}static async _onDeleteScenes(e,o,t){if(o.pack)return;const n=e.map((e=>e._id)),s=(await this.sublevel.findDelete({scene__in:n})).map((e=>e._id));db.DatabaseBackend.emit(this.documentName,"delete",s,{},t)}static socketListeners(e){e.on("resetFog",this.#o.bind(e)),e.on("syncFog",this.#t.bind(e))}static async#o(e){if(!this.user.isGM)throw new Error("You do not have permission to reset Fog of War for this scene");const o=(await FogExploration.find({scene:e})).map((e=>e.id));await FogExploration.sublevel.delMany(o),global.logger.info(`Reset ${o.length} FogExploration documents for Scene ${e}`),global.express.io.emit("resetFog",{sceneId:e}),db.DatabaseBackend.emit(FogExploration.documentName,"delete",o,{},this.user)}static async#t(e,o,{to:t},n){if(!this.user.isGM)return n({error:"You do not have permission to synchronize Fog of War for this scene."});if(FogExploration.#e.find((o=>o.sceneId===e)))return;const{logger:s}=global,i=[],a=new Map(game.users.map((e=>(e.id!==o&&i.push(e.id),[e.id,e]))));t??=i;const[r,[c]]=(await FogExploration.find({scene:e,user__in:[...t,o]})).partition((e=>e.user===o));if(!c)return n({error:"Unable to find Fog of War Document to synchronize to."});const d=Date.now();t=new Set(t),FogExploration.#e.push({sceneId:e,to:t});for(const e of r){const o=a.get(e.user);if(!o)continue;t.delete(e.user);const n=e.updateSource({explored:c.explored,timestamp:d});await e.save();const i=new DocumentSocketResponse({type:FogExploration.documentName,action:"update",broadcast:!1,result:[{...n,_id:e.id}],operation:{},userId:o.id});o.sockets.forEach((e=>e.emit("modifyDocument",i))),s.info(`Updated FogExploration with id [${e.id}]`)}for(const o of t){const t=a.get(o);if(!t)continue;const n={_id:randomID(),scene:e,explored:c.explored,user:o,timestamp:d},i=new FogExploration(n);await i.save();const r=new DocumentSocketResponse({type:FogExploration.documentName,action:"create",broadcast:!1,result:[{...n,_id:i.id}],operation:{},userId:o});t.sockets.forEach((e=>e.emit("modifyDocument",r))),s.info(`Created FogExploration with id [${i.id}]`)}FogExploration.#e=FogExploration.#e.filter((o=>o.sceneId!==e)),n({})}}