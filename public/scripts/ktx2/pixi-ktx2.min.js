var PixiBasisKTX2=function(e,t,r){"use strict";function s(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var a,o={},n={};function i(){return a||(a=1,function(r){Object.defineProperty(r,"__esModule",{value:!0}),r.BASIS_FORMATS_ALPHA=r.INTERNAL_FORMAT_TO_BASIS_FORMAT=r.BASIS_FORMAT_TO_TYPE=r.BASIS_FORMAT_TO_INTERNAL_FORMAT=r.BASIS_FORMATS=void 0;const s=e,a=t;var o;!function(e){e[e.cTFETC1=0]="cTFETC1",e[e.cTFETC2=1]="cTFETC2",e[e.cTFBC1=2]="cTFBC1",e[e.cTFBC3=3]="cTFBC3",e[e.cTFBC4=4]="cTFBC4",e[e.cTFBC5=5]="cTFBC5",e[e.cTFBC7=6]="cTFBC7",e[e.cTFPVRTC1_4_RGB=8]="cTFPVRTC1_4_RGB",e[e.cTFPVRTC1_4_RGBA=9]="cTFPVRTC1_4_RGBA",e[e.cTFASTC_4x4=10]="cTFASTC_4x4",e[e.cTFATC_RGB=11]="cTFATC_RGB",e[e.cTFATC_RGBA_INTERPOLATED_ALPHA=12]="cTFATC_RGBA_INTERPOLATED_ALPHA",e[e.cTFRGBA32=13]="cTFRGBA32",e[e.cTFRGB565=14]="cTFRGB565",e[e.cTFBGR565=15]="cTFBGR565",e[e.cTFRGBA4444=16]="cTFRGBA4444"}(o||(r.BASIS_FORMATS=o={})),r.BASIS_FORMAT_TO_INTERNAL_FORMAT={[o.cTFETC1]:s.INTERNAL_FORMATS.COMPRESSED_RGB_ETC1_WEBGL,[o.cTFBC1]:s.INTERNAL_FORMATS.COMPRESSED_RGB_S3TC_DXT1_EXT,[o.cTFBC3]:s.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,[o.cTFPVRTC1_4_RGB]:s.INTERNAL_FORMATS.COMPRESSED_RGB_PVRTC_4BPPV1_IMG,[o.cTFPVRTC1_4_RGBA]:s.INTERNAL_FORMATS.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,[o.cTFATC_RGB]:s.INTERNAL_FORMATS.COMPRESSED_RGB_ATC_WEBGL,[o.cTFASTC_4x4]:s.INTERNAL_FORMATS.COMPRESSED_RGBA_ASTC_4x4_KHR,[o.cTFBC7]:s.INTERNAL_FORMATS.COMPRESSED_RGBA_BPTC_UNORM_EXT},r.BASIS_FORMAT_TO_TYPE={[o.cTFRGBA32]:a.TYPES.UNSIGNED_BYTE,[o.cTFRGB565]:a.TYPES.UNSIGNED_SHORT_5_6_5,[o.cTFRGBA4444]:a.TYPES.UNSIGNED_SHORT_4_4_4_4},r.INTERNAL_FORMAT_TO_BASIS_FORMAT=Object.keys(r.BASIS_FORMAT_TO_INTERNAL_FORMAT).map((e=>Number(e))).reduce(((e,t)=>(e[r.BASIS_FORMAT_TO_INTERNAL_FORMAT[t]]=t,e)),{}),r.BASIS_FORMATS_ALPHA={[o.cTFBC3]:!0,[o.cTFPVRTC1_4_RGBA]:!0,[o.cTFASTC_4x4]:!0,[o.cTFBC7]:!0}}(n)),n}var c,l,d,T={},u={},_={},A={};function f(){if(l)return _;l=1,Object.defineProperty(_,"__esModule",{value:!0}),_.TranscoderWorkerBasis=void 0;const e=(c||(c=1,Object.defineProperty(A,"__esModule",{value:!0}),A.TranscoderWorkerWrapperBasis=function(){let e;const t={init:t=>self.BASIS?(self.BASIS({wasmBinary:t.wasmSource}).then((t=>{t.initializeBasis(),e=t,self.postMessage({type:"init",success:!0})})),null):(console.warn("jsSource was not prepended?"),{type:"init",success:!1}),transcode(t){const r=t.basisData,s=new e.BasisFile(r),a=s.getNumImages(),o=s.getHasAlpha()?t.rgbaFormat:t.rgbFormat,n=new Array(a);let i=!1;if(!s.startTranscoding())return s.close(),s.delete(),{type:"transcode",requestID:t.requestID,success:!1,imageArray:void 0};for(let e=0;e<a;e++){const r=s.getNumLevels(e),a={imageID:e,levelArray:new Array};for(let n=0;n<r;n++){const r=i?14:o,c=s.getImageWidth(e,n),l=s.getImageHeight(e,n),d=s.getImageTranscodedSizeInBytes(e,n,r);if(0===n){const e=c+3&-4,t=l+3&-4;a.width=e,a.height=t}const T=new Uint8Array(d);if(!s.transcodeImage(T,e,n,r,!1,!1)){if(i)return console.error(`Basis failed to transcode image ${e}, level ${n}!`),{type:"transcode",requestID:t.requestID,success:!1};console.warn(`Basis failed to transcode image ${e}, level ${n}! Retrying to an uncompressed texture format!`),e=-1,i=!0;break}a.levelArray.push({levelID:n,levelWidth:c,levelHeight:l,levelBuffer:T})}n[e]=a}return s.close(),s.delete(),{type:"transcode",requestID:t.requestID,success:!0,basisFormat:i?14:o,imageArray:n}}};self.onmessage=e=>{const r=e.data,s=t[r.type](r);s&&self.postMessage(s)}}),A);let t=class t{static bindingURL;static jsSource;static wasmSource;static _onTranscoderInitializedResolve;static onTranscoderInitialized=new Promise((e=>{t._onTranscoderInitializedResolve=e}));isInit;load;requests={};static _workerURL;static _tempID=0;static get workerURL(){if(!t._workerURL){let r=e.TranscoderWorkerWrapperBasis.toString();const s=r.indexOf("{"),a=r.lastIndexOf("}");r=r.slice(s+1,a),t.jsSource&&(r=`${t.jsSource}\n${r}`),t._workerURL=URL.createObjectURL(new Blob([r]))}return t._workerURL}worker;initPromise;onInit=()=>{};constructor(){this.isInit=!1,this.load=0,this.initPromise=new Promise((e=>{this.onInit=e})),t.wasmSource||console.warn("resources.BasisResource.TranscoderWorker has not been given the transcoder WASM binary!"),this.worker=new Worker(t.workerURL),this.worker.onmessage=this.onMessage,this.worker.postMessage({type:"init",jsSource:t.jsSource,wasmSource:t.wasmSource})}initAsync(){return this.initPromise}async transcodeAsync(e,r,s){++this.load;const a=t._tempID++,o=new Promise(((e,t)=>{this.requests[a]={resolve:e,reject:t}}));return this.worker.postMessage({requestID:a,basisData:e,rgbaFormat:r,rgbFormat:s,type:"transcode"}),o}onMessage=e=>{const t=e.data;if("init"===t.type){if(!t.success)throw new Error("BasisResource.TranscoderWorker failed to initialize.");this.isInit=!0,this.onInit()}else if("transcode"===t.type){--this.load;const e=t.requestID;t.success?this.requests[e].resolve(t):this.requests[e].reject(),delete this.requests[e]}};static loadTranscoder(e,r){const s=fetch(e).then((e=>e.text())).then((e=>{t.jsSource=e})),a=fetch(r).then((e=>e.arrayBuffer())).then((e=>{t.wasmSource=e}));return Promise.all([s,a]).then((e=>(this._onTranscoderInitializedResolve(),e)))}static setTranscoder(e,r){t.jsSource=e,t.wasmSource=r}};return _.TranscoderWorkerBasis=t,_}function R(){if(d)return u;d=1,Object.defineProperty(u,"__esModule",{value:!0}),u.BasisParser=void 0;const r=e,s=t,a=i(),o=f();let n=class e{static basisBinding;static defaultRGBFormat;static defaultRGBAFormat;static fallbackMode=!1;static workerPool=[];static async transcode(t){let r;return r="undefined"!=typeof Worker&&e.TranscoderWorker.wasmSource?await e.transcodeAsync(t):e.transcodeSync(t),r}static async transcodeAsync(t){e.defaultRGBAFormat||e.defaultRGBFormat||e.autoDetectFormats();const n=e.workerPool;let i=268435456,c=null;for(let e=0,t=n.length;e<t;e++)n[e].load<i&&(c=n[e],i=c.load);c||(c=new o.TranscoderWorkerBasis,n.push(c)),await c.initAsync();const l=await c.transcodeAsync(new Uint8Array(t),e.defaultRGBAFormat.basisFormat,e.defaultRGBFormat.basisFormat),d=l.basisFormat??13,T=l.imageArray??[];let u;if(Number(d)>12)u=T.map((e=>new s.BufferResource(new Uint16Array(e.levelArray[0].levelBuffer.buffer),{width:e.width,height:e.height})));else{const e=a.BASIS_FORMAT_TO_INTERNAL_FORMAT[d];u=new Array(T.length);for(let t=0,s=T.length;t<s;t++)u[t]=new r.CompressedTextureResource(null,{format:e,width:T[t].width,height:T[t].height,levelBuffers:T[t].levelArray,levels:T[t].levelArray.length})}return u.basisFormat=d,u}static transcodeSync(t){e.defaultRGBAFormat||e.defaultRGBFormat||e.autoDetectFormats();const o=e.basisBinding,n=new Uint8Array(t),i=new o.BasisFile(n),c=i.getNumImages(),l=i.getHasAlpha()?e.defaultRGBAFormat.basisFormat:e.defaultRGBFormat.basisFormat,d=a.BASIS_FORMATS.cTFRGB565,T=new Array(c);let u=e.fallbackMode;if(!i.startTranscoding())return console.error("Basis failed to start transcoding!"),i.close(),i.delete(),null;for(let e=0;e<c;e++){const t=u?1:i.getNumLevels(e),o=i.getImageWidth(e,0),n=i.getImageHeight(e,0),c=o+3&-4,_=n+3&-4,A=new Array(t);for(let r=0;r<t;r++){const t=i.getImageWidth(e,r),s=i.getImageHeight(e,r),a=i.getImageTranscodedSizeInBytes(e,0,u?d:l);if(A[r]={levelID:r,levelBuffer:new Uint8Array(a),levelWidth:t,levelHeight:s},i.transcodeImage(A[r].levelBuffer,e,0,u?d:l,!1,!1));else{if(u){console.error(`Basis failed to transcode image ${e}, level 0!`);break}e=-1,u=!0,console.warn(`Basis failed to transcode image ${e}, level 0 to a compressed texture format. Retrying to an uncompressed fallback format!`)}}let f;f=u?new s.BufferResource(new Uint16Array(A[0].levelBuffer.buffer),{width:o,height:n}):new r.CompressedTextureResource(null,{format:a.BASIS_FORMAT_TO_INTERNAL_FORMAT[l],width:c,height:_,levelBuffers:A,levels:t}),T[e]=f}i.close(),i.delete();const _=T;return _.basisFormat=u?d:l,_}static autoDetectFormats(t){if(console.log("autoDetectFormats",t),!t){const e=s.settings.ADAPTER.createCanvas().getContext("webgl");if(!e)return void console.error("WebGL not available for BASIS transcoding. Silently failing.");t={bptc:e.getExtension("EXT_texture_compression_bptc")??void 0,astc:e.getExtension("WEBGL_compressed_texture_astc")??void 0,etc:e.getExtension("WEBGL_compressed_texture_etc")??void 0,s3tc:e.getExtension("WEBGL_compressed_texture_s3tc")??void 0,s3tc_sRGB:e.getExtension("WEBGL_compressed_texture_s3tc_srgb")??void 0,pvrtc:(e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"))??void 0,etc1:e.getExtension("WEBGL_compressed_texture_etc1")??void 0,atc:e.getExtension("WEBGL_compressed_texture_atc")??void 0}}const r={};for(const e in t){const s=t[e];s&&Object.assign(r,Object.getPrototypeOf(s))}for(let t=0;t<2;t++){const o=!!t;let n=0,i=a.BASIS_FORMATS.cTFRGB565;for(const e in r)if(n=r[e]??0,i=a.INTERNAL_FORMAT_TO_BASIS_FORMAT[n],void 0!==i&&(o&&a.BASIS_FORMATS_ALPHA[i]||!o&&!a.BASIS_FORMATS_ALPHA[i]))break;n?e[o?"defaultRGBAFormat":"defaultRGBFormat"]={textureFormat:n,basisFormat:i}:(e[o?"defaultRGBAFormat":"defaultRGBFormat"]={textureFormat:s.TYPES.UNSIGNED_SHORT_5_6_5,basisFormat:a.BASIS_FORMATS.cTFRGB565},e.fallbackMode=!0)}}static bindTranscoder(t){e.basisBinding=t}static loadTranscoder(t,r){return e.TranscoderWorker.loadTranscoder(t,r)}static setTranscoder(t,r){e.TranscoderWorker.setTranscoder(t,r)}static TranscoderWorker=o.TranscoderWorkerBasis;static get TRANSCODER_WORKER_POOL_LIMIT(){return this.workerPool.length||1}static set TRANSCODER_WORKER_POOL_LIMIT(e){for(let t=this.workerPool.length;t<e;t++)this.workerPool[t]=new o.TranscoderWorkerBasis,this.workerPool[t].initAsync()}};return u.BasisParser=n,u}var B,m={};var S,F,g,O,I={},M={},p={},P={};function h(){if(F)return p;F=1,Object.defineProperty(p,"__esModule",{value:!0}),p.TranscoderWorkerKTX2=void 0;const e=(S||(S=1,Object.defineProperty(P,"__esModule",{value:!0}),P.TranscoderWorkerWrapperKTX2=function(){let e;const t={init:t=>self.BASIS?(self.BASIS({wasmBinary:t.wasmSource}).then((t=>{t.initializeBasis(),e=t,self.postMessage({type:"init",success:!0})})),null):(console.warn("jsSource was not prepended?"),{type:"init",success:!1}),transcode(t){const r=t.basisData,s=new e.KTX2File(r),a=s.getLevels()*Math.max(1,s.getLayers())*s.getFaces();let o=s.getLevels();const n=s.getLayers(),i=s.getFaces(),c=s.getHasAlpha()?t.rgbaFormat:t.rgbFormat,l=new Array(a);let d=!1;if(!s.startTranscoding())return s.close(),s.delete(),{type:"transcode",requestID:t.requestID,success:!1};for(let e=0;e<o;e++){const r={imageID:e,levelArray:new Array};for(let a=0;a<Math.max(1,n);a++)for(let n=0;n<i;n++){const i=s.getImageLevelInfo(e,a,n),l=i.width,T=i.height,u=d?14:c,_=s.getImageTranscodedSizeInBytes(e,a,n,u);if(0===a){const e=l+3&-4,t=T+3&-4;r.width=e,r.height=t}const A=new Uint8Array(_);if(!s.transcodeImage(A,e,a,n,u,!1,-1,-1)){if(d)return console.error(`Basis failed to transcode image ${e}, level ${a}!`),{type:"transcode",requestID:t.requestID,success:!1};console.warn(`Basis failed to transcode image ${e}, level ${a}! Retrying to an uncompressed texture format!`),e=-1,o=1,d=!0;break}r.levelArray.push({levelID:a,levelWidth:l,levelHeight:T,levelBuffer:A})}l[e]=r}return s.close(),s.delete(),{type:"transcode",requestID:t.requestID,success:!0,basisFormat:d?14:c,imageArray:l}}};self.onmessage=e=>{const r=e.data,s=t[r.type](r);s&&self.postMessage(s)}}),P);let t=class t{static bindingURL;static jsSource;static wasmSource;static _onTranscoderInitializedResolve;static onTranscoderInitialized=new Promise((e=>{t._onTranscoderInitializedResolve=e}));isInit;load;requests={};static _workerURL;static _tempID=0;static get workerURL(){if(!t._workerURL){let r=e.TranscoderWorkerWrapperKTX2.toString();const s=r.indexOf("{"),a=r.lastIndexOf("}");r=r.slice(s+1,a),t.jsSource&&(r=`${t.jsSource}\n${r}`),t._workerURL=URL.createObjectURL(new Blob([r]))}return t._workerURL}worker;initPromise;onInit=()=>{};constructor(){this.isInit=!1,this.load=0,this.initPromise=new Promise((e=>{this.onInit=e})),t.wasmSource||console.warn("resources.BasisResource.TranscoderWorker has not been given the transcoder WASM binary!"),this.worker=new Worker(t.workerURL),this.worker.onmessage=this.onMessage,this.worker.postMessage({type:"init",jsSource:t.jsSource,wasmSource:t.wasmSource})}initAsync(){return this.initPromise}async transcodeAsync(e,r,s){++this.load;const a=t._tempID++,o=new Promise(((e,t)=>{this.requests[a]={resolve:e,reject:t}}));return this.worker.postMessage({requestID:a,basisData:e,rgbaFormat:r,rgbFormat:s,type:"transcode"}),o}onMessage=e=>{const t=e.data;if("init"===t.type){if(!t.success)throw new Error("BasisResource.TranscoderWorker failed to initialize.");this.isInit=!0,this.onInit()}else if("transcode"===t.type){--this.load;const e=t.requestID;t.success?this.requests[e].resolve(t):this.requests[e].reject(),delete this.requests[e]}};static loadTranscoder(e,r){const s=fetch(e).then((e=>e.text())).then((e=>{t.jsSource=e})),a=fetch(r).then((e=>e.arrayBuffer())).then((e=>{t.wasmSource=e}));return Promise.all([s,a]).then((e=>(this._onTranscoderInitializedResolve(),e)))}static setTranscoder(e,r){t.jsSource=e,t.wasmSource=r}};return p.TranscoderWorkerKTX2=t,p}function y(){if(g)return M;g=1,Object.defineProperty(M,"__esModule",{value:!0}),M.KTX2Parser=void 0;const r=e,s=t,a=i(),o=h();let n=class e{static ktx2Binding;static defaultRGBFormat;static defaultRGBAFormat;static fallbackMode=!1;static workerPool=[];static async transcode(t){let r;return r="undefined"!=typeof Worker&&e.TranscoderWorker.wasmSource?await e.transcodeAsync(t):e.transcodeSync(t),r}static async transcodeAsync(t){e.defaultRGBAFormat||e.defaultRGBFormat||e.autoDetectFormats();const n=e.workerPool;let i=268435456,c=null;for(let e=0,t=n.length;e<t;e++)n[e].load<i&&(c=n[e],i=c.load);c||(c=new o.TranscoderWorkerKTX2,n.push(c)),await c.initAsync();const l=await c.transcodeAsync(new Uint8Array(t),e.defaultRGBAFormat.basisFormat,e.defaultRGBFormat.basisFormat),d=l.basisFormat??13,T=l.imageArray??[];let u;if(Number(d)>12)u=T.map((e=>new s.BufferResource(new Uint16Array(e.levelArray[0].levelBuffer.buffer),{width:e.width,height:e.height})));else{const e=a.BASIS_FORMAT_TO_INTERNAL_FORMAT[l.basisFormat];u=new Array(T.length);for(let t=0,s=T.length;t<s;t++)u[t]=new r.CompressedTextureResource(null,{format:e,width:T[t].width,height:T[t].height,levelBuffers:T[t].levelArray,levels:T[t].levelArray.length})}return u.basisFormat=d,u}static transcodeSync(t){e.defaultRGBAFormat||e.defaultRGBFormat||e.autoDetectFormats();const o=e.ktx2Binding;let n=e.fallbackMode;const i=new Uint8Array(t),c=new o.KTX2File(i),l=c.getDFDSize(),d=new Uint8Array(l);c.getDFD(d);const T=n?1:c.getLevels(),u=c.getLayers(),_=c.getFaces(),A=c.getHasAlpha(),f=new Array(T),R=A?e.defaultRGBAFormat.basisFormat:e.defaultRGBFormat.basisFormat,B=a.BASIS_FORMATS.cTFRGB565,m=new Array(T);if(!c.startTranscoding())return console.error("Basis failed to start transcoding!"),c.close(),c.delete(),null;for(let e=0;e<T;e++){const t=c.getImageLevelInfo(e,0,0),o=t.origWidth,i=t.origHeight,l=o+3&-4,d=i+3&-4;for(let t=0;t<Math.max(1,u);t++)for(let r=0;r<_;r++){const s=c.getImageLevelInfo(e,t,r),a=s.width,o=s.height,i=c.getImageTranscodedSizeInBytes(e,t,r,n?B:R);if(f[t]={levelID:t,levelBuffer:new Uint8Array(i),levelWidth:a,levelHeight:o},c.transcodeImage(f[t].levelBuffer,e,t,r,n?B:R,!1,-1,-1));else{if(n){console.error(`Basis failed to transcode image ${e}, level 0!`);break}e=-1,n=!0,console.warn(`Basis failed to transcode image ${e}, level 0 to a compressed texture format. Retrying to an uncompressed fallback format!`)}}let A;A=n?new s.BufferResource(new Uint16Array(f[0].levelBuffer.buffer),{width:o,height:i}):new r.CompressedTextureResource(null,{format:a.BASIS_FORMAT_TO_INTERNAL_FORMAT[R],width:l,height:d,levelBuffers:f,levels:T}),m[e]=A}c.close(),c.delete();const S=m;return S.basisFormat=n?B:R,S}static autoDetectFormats(t){if(!t){const e=s.settings.ADAPTER.createCanvas().getContext("webgl");if(!e)return void console.error("WebGL not available for BASIS transcoding. Silently failing.");t={bptc:e.getExtension("EXT_texture_compression_bptc")??void 0,astc:e.getExtension("WEBGL_compressed_texture_astc")??void 0,etc:e.getExtension("WEBGL_compressed_texture_etc")??void 0,s3tc:e.getExtension("WEBGL_compressed_texture_s3tc")??void 0,s3tc_sRGB:e.getExtension("WEBGL_compressed_texture_s3tc_srgb")??void 0,pvrtc:(e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"))??void 0,etc1:e.getExtension("WEBGL_compressed_texture_etc1")??void 0,atc:e.getExtension("WEBGL_compressed_texture_atc")??void 0}}const r={};for(const e in t){const s=t[e];s&&Object.assign(r,Object.getPrototypeOf(s))}for(let t=0;t<2;t++){const o=!!t;let n,i=a.BASIS_FORMATS.cTFRGB565;for(const e in r)if(n=r[e],i=a.INTERNAL_FORMAT_TO_BASIS_FORMAT[n],void 0!==i&&(o&&a.BASIS_FORMATS_ALPHA[i]||!o&&!a.BASIS_FORMATS_ALPHA[i]))break;void 0!==n?e[o?"defaultRGBAFormat":"defaultRGBFormat"]={textureFormat:n,basisFormat:i}:(e[o?"defaultRGBAFormat":"defaultRGBFormat"]={textureFormat:s.TYPES.UNSIGNED_SHORT_5_6_5,basisFormat:a.BASIS_FORMATS.cTFRGB565},e.fallbackMode=!0)}}static bindTranscoder(t){e.ktx2Binding=t}static loadTranscoder(t,r){return e.TranscoderWorker.loadTranscoder(t,r)}static setTranscoder(t,r){e.TranscoderWorker.setTranscoder(t,r)}static TranscoderWorker=o.TranscoderWorkerKTX2;static get TRANSCODER_WORKER_POOL_LIMIT(){return this.workerPool.length||1}static set TRANSCODER_WORKER_POOL_LIMIT(e){for(let t=this.workerPool.length;t<e;t++)this.workerPool[t]=new o.TranscoderWorkerKTX2,this.workerPool[t].initAsync()}};return M.KTX2Parser=n,M}var w,E={};var v,b={};var L,x,G,k,D,N,W={};function C(){return x||(x=1,s=T,a=T&&T.__createBinding||(Object.create?function(e,t,r,s){void 0===s&&(s=r);var a=Object.getOwnPropertyDescriptor(t,r);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,s,a)}:function(e,t,r,s){void 0===s&&(s=r),e[s]=t[r]}),o=T&&T.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||a(t,e,r)},Object.defineProperty(s,"__esModule",{value:!0}),o(R(),s),o((B||(B=1,function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.detectBasis=void 0;const r=t,s=R();e.detectBasis={extension:{type:r.ExtensionType.DetectionParser,priority:3},test:async()=>!(!s.BasisParser.basisBinding||!s.BasisParser.TranscoderWorker.wasmSource),add:async e=>[...e,"basis"],remove:async e=>e.filter((e=>"basis"!==e))},r.extensions.add(e.detectBasis)}(m)),m),s),o((O||(O=1,function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.detectKTX2=void 0;const r=t,s=y();e.detectKTX2={extension:{type:r.ExtensionType.DetectionParser,priority:3},test:async()=>!(!s.KTX2Parser.ktx2Binding||!s.KTX2Parser.TranscoderWorker.wasmSource),add:async e=>[...e,"ktx2"],remove:async e=>e.filter((e=>"ktx2"!==e))},r.extensions.add(e.detectKTX2)}(I)),I),s),o(y(),s),o((w||(w=1,function(s){Object.defineProperty(s,"__esModule",{value:!0}),s.loadBasis=void 0,s.loadBasisBufferToTexture=async function(e,t,r){await l.TranscoderWorkerBasis.onTranscoderInitialized;const s=await d.BasisParser.transcode(e.buffer),i=s?.basisFormat?c.BASIS_FORMAT_TO_TYPE[s?.basisFormat]:void 0,T=s?.basisFormat!==c.BASIS_FORMATS.cTFRGBA32?n.FORMATS.RGB:n.FORMATS.RGBA;if(!s||!s[0])return;const u=s[0],_=new n.BaseTexture(u,{mipmap:u instanceof o.CompressedTextureResource&&u.levels>1?n.MIPMAP_MODES.ON_MANUAL:n.MIPMAP_MODES.OFF,alphaMode:n.ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,type:i,format:T});return(0,a.createTexture)(_,r,t)},s.loadBasisBufferToArray=async function(e,t,r){await l.TranscoderWorkerBasis.onTranscoderInitialized;const s=await d.BasisParser.transcode(e.buffer),i=s?.basisFormat?c.BASIS_FORMAT_TO_TYPE[s?.basisFormat]:void 0,T=s?.basisFormat!==c.BASIS_FORMATS.cTFRGBA32?n.FORMATS.RGB:n.FORMATS.RGBA;return s?.map((e=>{const s=new n.BaseTexture(e,{mipmap:e instanceof o.CompressedTextureResource&&e.levels>1?n.MIPMAP_MODES.ON_MANUAL:n.MIPMAP_MODES.OFF,alphaMode:n.ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,type:i,format:T});return(0,a.createTexture)(s,r,t)}))??[]};const a=r,o=e,n=t,c=i(),l=f(),d=R();s.loadBasis={extension:{type:n.ExtensionType.LoadParser,priority:a.LoaderParserPriority.High},name:"loadBasis",test:e=>(0,a.checkExtension)(e,".basis"),async load(e,t,r){await l.TranscoderWorkerBasis.onTranscoderInitialized;const s=await n.settings.ADAPTER.fetch(e),i=await s.arrayBuffer(),T=await d.BasisParser.transcode(i),u=T?.basisFormat?c.BASIS_FORMAT_TO_TYPE[T?.basisFormat]:void 0,_=T?.basisFormat!==c.BASIS_FORMATS.cTFRGBA32?n.FORMATS.RGB:n.FORMATS.RGBA,A=T?.map((s=>{const i=new n.BaseTexture(s,{mipmap:s instanceof o.CompressedTextureResource&&s.levels>1?n.MIPMAP_MODES.ON_MANUAL:n.MIPMAP_MODES.OFF,alphaMode:n.ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,type:u,format:_,...t.data});return(0,a.createTexture)(i,r,e)}))??[];return 1===A.length?A[0]:A},unload(e){Array.isArray(e)?e.forEach((e=>e.destroy(!0))):e.destroy(!0)}},n.extensions.add(s.loadBasis)}(E)),E),s),o((v||(v=1,function(s){Object.defineProperty(s,"__esModule",{value:!0}),s.loadKTX2=void 0,s.loadKTX2BufferToTexture=async function(e,t,r){await l.TranscoderWorkerKTX2.onTranscoderInitialized;const s=await d.KTX2Parser.transcode(e.buffer),i=s?.basisFormat?c.BASIS_FORMAT_TO_TYPE[s?.basisFormat]:void 0,T=s?.basisFormat!==c.BASIS_FORMATS.cTFRGBA32?n.FORMATS.RGB:n.FORMATS.RGBA;if(!s||!s[0])return;const u=s[0],_=new n.BaseTexture(u,{mipmap:u instanceof o.CompressedTextureResource&&u.levels>1?n.MIPMAP_MODES.ON_MANUAL:n.MIPMAP_MODES.OFF,alphaMode:n.ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,type:i,format:T});return(0,a.createTexture)(_,r,t)},s.loadKTX2BufferToArray=async function(e,t,r){await l.TranscoderWorkerKTX2.onTranscoderInitialized;const s=await d.KTX2Parser.transcode(e.buffer),i=s?.basisFormat?c.BASIS_FORMAT_TO_TYPE[s?.basisFormat]:void 0,T=s?.basisFormat!==c.BASIS_FORMATS.cTFRGBA32?n.FORMATS.RGB:n.FORMATS.RGBA;return s?.map((e=>{const s=new n.BaseTexture(e,{mipmap:e instanceof o.CompressedTextureResource&&e.levels>1?n.MIPMAP_MODES.ON_MANUAL:n.MIPMAP_MODES.OFF,alphaMode:n.ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,type:i,format:T});return(0,a.createTexture)(s,r,t)}))??[]};const a=r,o=e,n=t,c=i(),l=h(),d=y();s.loadKTX2={extension:{type:n.ExtensionType.LoadParser,priority:a.LoaderParserPriority.High},name:"loadKTX2",test:e=>(0,a.checkExtension)(e,".ktx2"),async load(e,t,r){await l.TranscoderWorkerKTX2.onTranscoderInitialized;const s=await n.settings.ADAPTER.fetch(e),i=await s.arrayBuffer(),T=await d.KTX2Parser.transcode(i),u=T?.basisFormat?c.BASIS_FORMAT_TO_TYPE[T?.basisFormat]:void 0,_=T?.basisFormat!==c.BASIS_FORMATS.cTFRGBA32?n.FORMATS.RGB:n.FORMATS.RGBA,A=T?.map((s=>{const i=new n.BaseTexture(s,{mipmap:s instanceof o.CompressedTextureResource&&s.levels>1?n.MIPMAP_MODES.ON_MANUAL:n.MIPMAP_MODES.OFF,alphaMode:n.ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,type:u,format:_,...t.data});return(0,a.createTexture)(i,r,e)}))??[];return 1===A.length?A[0]:A},unload(e){Array.isArray(e)?e.forEach((e=>e.destroy(!0))):e.destroy(!0)}},n.extensions.add(s.loadKTX2)}(b)),b),s),o((L||(L=1,function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.resolveKTX2TextureUrl=void 0;const r=t;e.resolveKTX2TextureUrl={extension:r.ExtensionType.ResolveParser,test:e=>{const t=r.utils.path.extname(e).slice(1);return["ktx2"].includes(t)},parse:e=>{const t=r.utils.path.extname(e).slice(1);return{resolution:parseFloat(r.settings.RETINA_PREFIX?.exec(e)?.[1]??"1"),format:t,src:e}}},r.extensions.add(e.resolveKTX2TextureUrl)}(W)),W),s)),T;var s,a,o}return s((G||(G=1,k=o,D=o&&o.__createBinding||(Object.create?function(e,t,r,s){void 0===s&&(s=r);var a=Object.getOwnPropertyDescriptor(t,r);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,s,a)}:function(e,t,r,s){void 0===s&&(s=r),e[s]=t[r]}),N=o&&o.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||D(t,e,r)},Object.defineProperty(k,"__esModule",{value:!0}),N(i(),k),N(C(),k),N(f(),k),N(h(),k)),o))}(PIXI,PIXI,PIXI);
