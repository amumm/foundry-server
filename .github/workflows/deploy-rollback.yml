name: Rollback Deployment

on:
  workflow_dispatch:
    inputs:
      backup_timestamp:
        description: "Backup timestamp to restore (format: YYYYMMDD-HHMMSS) - leave empty to list available backups"
        required: false
        type: string

jobs:
  list-backups:
    if: ${{ github.event.inputs.backup_timestamp == '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ORACLE_SSH_PRIVATE_KEY }}" > ~/.ssh/oracle_key
          chmod 600 ~/.ssh/oracle_key
          ssh-keyscan -H ${{ secrets.ORACLE_HOST }} >> ~/.ssh/known_hosts

      - name: List available backups
        run: |
          ssh -i ~/.ssh/oracle_key ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }} << 'EOF'
            echo "📋 Available backups:"
            if [ -d "/opt/foundryvtt/backups" ]; then
              sudo ls -lh /opt/foundryvtt/backups/data-backup-*.tar.gz 2>/dev/null || echo "❌ No backups found"
            else
              echo "❌ Backup directory does not exist"
            fi
            echo ""
            echo "ℹ️  To restore a backup, re-run this workflow with the timestamp"
            echo "   Example: 20241016-143022"
          EOF

  rollback:
    if: ${{ github.event.inputs.backup_timestamp != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ORACLE_SSH_PRIVATE_KEY }}" > ~/.ssh/oracle_key
          chmod 600 ~/.ssh/oracle_key
          ssh-keyscan -H ${{ secrets.ORACLE_HOST }} >> ~/.ssh/known_hosts

      - name: Verify backup exists
        run: |
          ssh -i ~/.ssh/oracle_key ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }} << 'EOF'
            set -e
            BACKUP_FILE="/opt/foundryvtt/backups/data-backup-${{ github.event.inputs.backup_timestamp }}.tar.gz"
            
            if [ ! -f "$BACKUP_FILE" ]; then
              echo "❌ Backup file not found: $BACKUP_FILE"
              echo "📋 Available backups:"
              sudo ls -lh /opt/foundryvtt/backups/data-backup-*.tar.gz 2>/dev/null || echo "No backups found"
              exit 1
            fi
            
            echo "✅ Backup file found: $BACKUP_FILE"
          EOF

      - name: Stop FoundryVTT service
        run: |
          ssh -i ~/.ssh/oracle_key ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }} << 'EOF'
            set -e
            echo "⏸️  Stopping FoundryVTT service..."
            sudo systemctl stop foundryvtt
            echo "✅ Service stopped"
          EOF

      - name: Backup current data before rollback
        run: |
          ssh -i ~/.ssh/oracle_key ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }} << 'EOF'
            set -e
            echo "💾 Creating backup of current data before rollback..."
            BACKUP_FILE="data-before-rollback-$(date +%Y%m%d-%H%M%S).tar.gz"
            
            if [ -d "/opt/foundryvtt/data" ]; then
              sudo tar -czf "/opt/foundryvtt/backups/$BACKUP_FILE" -C /opt/foundryvtt data/
              echo "✅ Current data backed up as: $BACKUP_FILE"
            fi
          EOF

      - name: Restore backup
        run: |
          ssh -i ~/.ssh/oracle_key ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }} << 'EOF'
            set -e
            BACKUP_FILE="/opt/foundryvtt/backups/data-backup-${{ github.event.inputs.backup_timestamp }}.tar.gz"
            
            echo "🔄 Restoring backup from ${{ github.event.inputs.backup_timestamp }}..."
            
            # Remove current data
            sudo rm -rf /opt/foundryvtt/data
            
            # Extract backup
            sudo tar -xzf "$BACKUP_FILE" -C /opt/foundryvtt/
            
            # Fix permissions
            sudo chown -R foundryvtt:foundryvtt /opt/foundryvtt/data
            
            echo "✅ Backup restored successfully"
          EOF

      - name: Start FoundryVTT service
        run: |
          ssh -i ~/.ssh/oracle_key ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }} << 'EOF'
            set -e
            echo "▶️  Starting FoundryVTT service..."
            sudo systemctl start foundryvtt
            
            echo "⏳ Waiting for service to start..."
            sleep 5
            
            if sudo systemctl is-active --quiet foundryvtt; then
              echo "✅ FoundryVTT service is running!"
            else
              echo "❌ Service failed to start!"
              echo "📋 Last 30 log lines:"
              sudo journalctl -u foundryvtt -n 30 --no-pager
              exit 1
            fi
          EOF

      - name: Verify rollback
        run: |
          echo "🎉 Rollback complete!"
          echo "📍 Your FoundryVTT instance: http://${{ secrets.ORACLE_HOST }}:30000"
          echo ""
          echo "⚠️  A backup of the data before rollback was created"
          echo "   in case you need to revert this rollback."
