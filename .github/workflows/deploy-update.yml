name: Update/Redeploy to Oracle Cloud

on:
  workflow_dispatch:
    inputs:
      backup_data:
        description: "Backup user data before update?"
        required: true
        type: boolean
        default: true
      restart_service:
        description: "Restart service after update?"
        required: true
        type: boolean
        default: true

jobs:
  deploy-update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ORACLE_SSH_PRIVATE_KEY }}" > ~/.ssh/oracle_key
          chmod 600 ~/.ssh/oracle_key
          ssh-keyscan -H ${{ secrets.ORACLE_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          ssh -i ~/.ssh/oracle_key -o StrictHostKeyChecking=no ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }} "echo '‚úÖ SSH connection successful'"

      - name: Backup user data
        if: ${{ github.event.inputs.backup_data == 'true' }}
        run: |
          ssh -i ~/.ssh/oracle_key ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }} << 'EOF'
            set -e
            BACKUP_DIR="/opt/foundryvtt/backups"
            BACKUP_FILE="data-backup-$(date +%Y%m%d-%H%M%S).tar.gz"
            
            echo "üíæ Creating backup of user data..."
            sudo mkdir -p "$BACKUP_DIR"
            
            if [ -d "/opt/foundryvtt/data" ]; then
              sudo tar -czf "$BACKUP_DIR/$BACKUP_FILE" -C /opt/foundryvtt data/
              echo "‚úÖ Backup created: $BACKUP_DIR/$BACKUP_FILE"
              
              # Keep only last 5 backups
              cd "$BACKUP_DIR"
              sudo ls -t data-backup-*.tar.gz | tail -n +6 | xargs -r sudo rm
              echo "üìã Available backups:"
              sudo ls -lh data-backup-*.tar.gz 2>/dev/null || echo "No backups found"
            else
              echo "‚ÑπÔ∏è  No data directory found to backup"
            fi
          EOF

      - name: Stop FoundryVTT service
        run: |
          ssh -i ~/.ssh/oracle_key ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }} << 'EOF'
            set -e
            echo "‚è∏Ô∏è  Stopping FoundryVTT service..."
            if sudo systemctl is-active --quiet foundryvtt; then
              sudo systemctl stop foundryvtt
              echo "‚úÖ Service stopped"
            else
              echo "‚ÑπÔ∏è  Service was not running"
            fi
          EOF

      - name: Create deployment archive
        run: |
          echo "üì¶ Creating deployment archive..."
          tar --exclude='node_modules' \
              --exclude='.git' \
              --exclude='.github' \
              --exclude='tmp' \
              --exclude='*.log' \
              --exclude='data' \
              -czf foundryvtt-update.tar.gz .

      - name: Upload updated files
        run: |
          echo "‚¨ÜÔ∏è  Uploading updated application files..."
          scp -i ~/.ssh/oracle_key foundryvtt-update.tar.gz \
            ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }}:/tmp/

      - name: Extract and update application
        run: |
          ssh -i ~/.ssh/oracle_key ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }} << 'EOF'
            set -e
            echo "üìÇ Extracting updated files..."
            
            # Create temporary directory
            sudo mkdir -p /tmp/foundryvtt-update
            cd /tmp
            tar -xzf foundryvtt-update.tar.gz -C /tmp/foundryvtt-update/
            
            # Backup the data directory path in case it exists
            if [ -d "/opt/foundryvtt/data" ]; then
              sudo mv /opt/foundryvtt/data /tmp/foundryvtt-data-preserve
            fi
            
            # Remove old application files (keep data)
            echo "üßπ Removing old application files..."
            sudo find /opt/foundryvtt -mindepth 1 -maxdepth 1 ! -name 'data' ! -name 'backups' -exec rm -rf {} +
            
            # Copy new files
            echo "üìã Installing updated files..."
            sudo cp -r /tmp/foundryvtt-update/* /opt/foundryvtt/
            
            # Restore data directory
            if [ -d "/tmp/foundryvtt-data-preserve" ]; then
              sudo mv /tmp/foundryvtt-data-preserve /opt/foundryvtt/data
            fi
            
            # Fix permissions
            sudo chown -R foundryvtt:foundryvtt /opt/foundryvtt
            
            # Install/update dependencies
            echo "üì¶ Updating Node.js dependencies..."
            cd /opt/foundryvtt
            sudo -u foundryvtt npm install --production
            
            # Cleanup
            echo "üßπ Cleaning up temporary files..."
            rm -rf /tmp/foundryvtt-update
            rm /tmp/foundryvtt-update.tar.gz
          EOF

      - name: Restart FoundryVTT service
        if: ${{ github.event.inputs.restart_service == 'true' }}
        run: |
          ssh -i ~/.ssh/oracle_key ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }} << 'EOF'
            set -e
            echo "üîÑ Restarting FoundryVTT service..."
            sudo systemctl start foundryvtt
            
            echo "‚è≥ Waiting for service to start..."
            sleep 5
            
            if sudo systemctl is-active --quiet foundryvtt; then
              echo "‚úÖ FoundryVTT service is running!"
            else
              echo "‚ùå Service failed to start!"
              echo "üìã Last 30 log lines:"
              sudo journalctl -u foundryvtt -n 30 --no-pager
              exit 1
            fi
          EOF

      - name: Verify update
        run: |
          ssh -i ~/.ssh/oracle_key ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }} << 'EOF'
            set -e
            echo "üìä Deployment verification:"
            echo ""
            echo "Service status:"
            sudo systemctl status foundryvtt --no-pager || true
            echo ""
            echo "Recent logs:"
            sudo journalctl -u foundryvtt -n 10 --no-pager
            echo ""
            echo "Application version:"
            if [ -f "/opt/foundryvtt/package.json" ]; then
              grep '"version"' /opt/foundryvtt/package.json || true
            fi
          EOF

      - name: Display completion message
        run: |
          echo "üéâ Update deployment complete!"
          echo "üìç Your FoundryVTT instance: http://${{ secrets.ORACLE_HOST }}:30000"
          echo ""
          if [ "${{ github.event.inputs.backup_data }}" == "true" ]; then
            echo "üíæ User data was backed up before update"
          fi
          if [ "${{ github.event.inputs.restart_service }}" == "true" ]; then
            echo "üîÑ Service was restarted"
          else
            echo "‚ö†Ô∏è  Service was NOT restarted - manual restart required"
          fi
